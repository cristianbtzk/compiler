E -> LI_FUN & START
LI_FUN -> FUN & LI_FUN | VAZ
START -> start & ap & LI_PAR & fp & ac & LI_BLO E fc

FUN -> function & id & ap & LI_PAR & fp & ac & LI_BLO E fc

LI_PAR -> LI_PAR1 | VAZ
LI_PAR1 -> id & LI_PAR2
LI_PAR2 -> cmm & id && LI_PAR2

LI_BLO -> CMD & LI_BLO | VAZ

COM -> A_IF | DECL | ATR | A_WHILE | A_PRINT

A_IF -> if & ap & COMP & fp & ac & LI_BLO & fc 

DECL -> int id // Adicionar tipo (int id)

ATR -> id & atr & const

COMP -> id & OP & const 

A_WHILE -> while & ap & COMP & fp & ac & LI_BLO & fc

A_PRINT -> print & ap & id & fp

OP -> menos | mais | div | mult | maior | menor | menor_igual | maior_igual | dif

___

FIRSTS:
E: function | vaz
LI_FUN: function | vaz
START: start
FUN: function
LI_PAR: id | vaz
LI_PAR1: id
LI_PAR2: cmm
LI_BLO: if | id | while | print | vaz
COM: if | int | id | while | print
A_IF: if
DECL: int
ATR: id
COMP: id
A_WHILE: while
A_PRINT: print
OP: menos | mais | div | mult | maior | menor | menor_igual | maior_igual | dif

FOLLOWS:
E
LI_FUN
FUN
LI_PAR
LI_PAR1
LI_PAR2
LI_BLO
COM
A_IF
DECL
ATR
COMP
A_WHILE
A_PRINT
OP