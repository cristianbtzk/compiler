E -> LI_FUN & A_START
LI_FUN -> FUN & LI_FUN | VAZ
A_START -> start & ap & LI_PAR & fp & ac & LI_BLO E fc

FUN -> function & id & ap & LI_PAR & fp & ac & LI_BLO E fc
LI_PAR -> id & LI_PAR2
LI_PAR2 -> cmm & id && LI_PAR2 | VAZ
LI_BLO -> CMD & LI_BLO | VAZ
CMD -> A_IF | DECL | A_ATR | A_WHILE | A_PRINT
A_IF -> if & ap & A_COMP & fp & ac & LI_BLO & fc 
DECL -> int id // Adicionar tipo (int id)
A_ATR -> id & atr & const
A_COMP -> id & OP & const 
A_WHILE -> while & ap & A_COMP & fp & ac & LI_BLO & fc
A_PRINT -> print & ap & id & fp
OP -> menos | mais | div | mult | maior | menor | menor_igual | maior_igual | dif

___

FIRSTS:
E: function | vaz
LI_FUN: function | vaz
A_START: start
FUN: function
LI_PAR: id 
LI_PAR2: cmm | vaz
LI_BLO: if | id | while | print | vaz
CMD: if | int | id | while | print
A_IF: if
DECL: int
A_ATR: id
A_COMP: id
A_WHILE: while
A_PRINT: print
OP: menos | mais | div | mult | comp | maior | menor | menor_igual | maior_igual | dif

FOLLOWS:
E
LI_FUN
FUN
LI_PAR
LI_PAR2
LI_BLO
CMD
A_IF
DECL
A_ATR
A_COMP
A_WHILE
A_PRINT
OP